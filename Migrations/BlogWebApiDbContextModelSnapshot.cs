// <auto-generated />
using System;
using BlogWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogWebApi.Migrations
{
    [DbContext(typeof(BlogWebApiDbContext))]
    partial class BlogWebApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogWebApi.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2B5DA359F6");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BlogWebApi.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PostId")
                        .HasName("PK__Post__AA126038AA6C25D7");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            CategoryId = 1,
                            Content = "This is a sample post content.",
                            Created = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(491),
                            LastModified = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(491),
                            Title = "Sample Post 1",
                            UserId = 1
                        },
                        new
                        {
                            PostId = 2,
                            CategoryId = 2,
                            Content = "Another sample post content.",
                            Created = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(492),
                            LastModified = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(493),
                            Title = "Sample Post 2",
                            UserId = 2
                        },
                        new
                        {
                            PostId = 3,
                            CategoryId = 3,
                            Content = "Another sample post content.",
                            Created = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(493),
                            LastModified = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(494),
                            Title = "Sample Post 3",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("BlogWebApi.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE3A67BBFFB8");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BlogWebApi.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Registered")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC34576823");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "superadminpwd",
                            Registered = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(410),
                            RoleId = 1,
                            Username = "superadmin"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "adminpwad",
                            Registered = new DateTime(2023, 10, 31, 9, 36, 6, 875, DateTimeKind.Local).AddTicks(419),
                            RoleId = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BlogWebApi.Models.Post", b =>
                {
                    b.HasOne("BlogWebApi.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Post_Category");

                    b.HasOne("BlogWebApi.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_User");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogWebApi.Models.User", b =>
                {
                    b.HasOne("BlogWebApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BlogWebApi.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogWebApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BlogWebApi.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
